import axios from 'axios'

const API_URL = 'http://localhost:8000' // ‚úÖ –ü–†–û–í–ï–†–¨ –ü–û–†–¢ –ë–≠–ö–ï–ù–î–ê!

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫—É–∫–∏
const getCsrfToken = (): string | null => {
	const match = document.cookie.match(/(^| )XSRF-TOKEN=([^;]+)/)
	return match ? decodeURIComponent(match[2]) : null
}

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ API-–∫–ª–∏–µ–Ω—Ç–∞
const api = axios.create({
	baseURL: API_URL,
	withCredentials: true, // ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –∫—É–∫–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤
	headers: {
		'Content-Type': 'application/json',
		Accept: 'application/json',
	},
})

// üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º CSRF-—Ç–æ–∫–µ–Ω
api.interceptors.request.use(
	config => {
		const csrfToken = getCsrfToken()
		if (csrfToken) {
			config.headers['X-XSRF-TOKEN'] = csrfToken
		} else {
			console.warn('‚ö†Ô∏è CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—É–∫–∞—Ö!')
		}
		return config
	},
	error => Promise.reject(error)
)

// üîÑ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
api.interceptors.response.use(
	response => response,
	async error => {
		if (error.response?.status === 401) {
			console.warn('üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...')
			try {
				const refreshResponse = await axios.post(
					`${API_URL}/auth/refresh`,
					{},
					{ withCredentials: true }
				)

				console.log('üîÑ –ù–æ–≤—ã–π accessToken –ø–æ–ª—É—á–µ–Ω:', refreshResponse.data)

				// –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
				return api(error.config)
			} catch (refreshError) {
				console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞', refreshError)
				// –ï—Å–ª–∏ refreshToken –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Üí —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
				return Promise.reject(refreshError)
			}
		}
		return Promise.reject(error)
	}
)

export default api

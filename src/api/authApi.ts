import { jwtDecode } from 'jwt-decode'
import api from './apiClient'

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–∞–º–∏
export const fetchCsrfToken = async (): Promise<void> => {
	try {
		const response = await api.get('/auth/csrf-token', {
			withCredentials: true,
		})
		console.log('‚úÖ CSRF-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', response.data)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞:', error)
		throw error
	}
}

// üîπ –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞
export const login = async (
	email: string,
	password: string,
	rememberMe: boolean
) => {
	try {
		// 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º CSRF-—Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º
		await fetchCsrfToken()

		// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω
		const response = await api.post(
			'/auth/login',
			{ email, password, rememberMe },
			{ withCredentials: true }
		)

		console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', response.data)
		localStorage.setItem('access_token', response.data.access_token) // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω

		return response.data
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
		throw error
	}
}

// üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
export const logout = async () => {
	try {
		await api.post('/auth/logout', {}, { withCredentials: true })
		localStorage.removeItem('access_token') // ‚úÖ –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
		console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
	}
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const getUserIdFromToken = (): string | null => {
	try {
		const token = localStorage.getItem('access_token') // ‚úÖ –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
		if (!token) return null

		const decoded: any = jwtDecode(token)
		return decoded?.userId || null
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
		return null
	}
}

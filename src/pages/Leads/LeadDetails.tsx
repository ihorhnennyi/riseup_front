import { fetchLeadById } from '@api/leadsApi'
import { fetchStatuses } from '@api/statusApi'
import {
	Avatar,
	Box,
	Button,
	Container,
	Divider,
	Grid,
	Paper,
	Typography,
} from '@mui/material'
import { motion } from 'framer-motion'
import { useEffect, useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import EditCandidateModal from './components/EditCandidateModal'

const LeadDetails = () => {
	const { id } = useParams()
	const navigate = useNavigate()
	const [lead, setLead] = useState<any>(null)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	const [editModalOpen, setEditModalOpen] = useState(false)
	const [statuses, setStatuses] = useState([])

	useEffect(() => {
		const loadLead = async () => {
			if (!id) {
				setError('Lead ID not provided')
				setLoading(false)
				return
			}

			try {
				const statusesData = await fetchStatuses()
				setStatuses(statusesData)

				const leadData = await fetchLeadById(id)

				console.log('üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', leadData)

				const leadStatusId = leadData?.statusId?._id || leadData?.statusId
				const leadStatus = statusesData.find(s => s._id === leadStatusId)

				setLead({
					...leadData,
					statusId: leadStatus ? leadStatus._id : null,
					recruiter: leadData.recruiter || null,
					createdBy: leadData.createdBy || null,
				})
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–∞:', err)
				setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞')
			} finally {
				setLoading(false)
			}
		}

		loadLead()
	}, [id])

	if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
	if (error) return <div style={{ color: 'red' }}>{error}</div>

	return (
		<motion.div
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			transition={{ duration: 0.5 }}
		>
			<Container maxWidth='lg' sx={{ mt: 2 }}>
				<Paper sx={{ padding: 3 }}>
					<Button
						variant='outlined'
						color='primary'
						onClick={() => navigate(-1)}
						sx={{ mb: 2 }}
					>
						–ù–∞–∑–∞–¥
					</Button>

					<Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
						<Avatar
							alt={lead?.name}
							src={lead?.photo || '/default-avatar.png'}
							sx={{ width: 80, height: 80 }}
						/>
						<Box>
							<Typography variant='h5' sx={{ fontWeight: 'bold', mb: 1 }}>
								{lead?.name} {lead?.surname}
							</Typography>
							<Typography variant='body2' sx={{ color: 'gray' }}>
								{lead?.email || 'No email provided'}
							</Typography>
						</Box>
					</Box>

					<Divider sx={{ my: 2 }} />

					{/* üîπ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
					<Typography variant='h6' sx={{ fontWeight: 'bold' }}>
						–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
					</Typography>
					<Grid container spacing={2} sx={{ mb: 2 }}>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–¢–µ–ª–µ—Ñ–æ–Ω: {lead?.phone || 'N/A'}
							</Typography>
							<Typography variant='body1'>
								Telegram: {lead?.telegram || 'N/A'}
							</Typography>
							<Typography variant='body1'>
								–í–æ–∑—Ä–∞—Å—Ç: {lead?.age || 'N/A'}
							</Typography>
						</Grid>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–°—Ç–∞—Ç—É—Å:{' '}
								{lead?.statusId && statuses.length
									? statuses.find(s => String(s._id) === String(lead.statusId))
											?.name || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'
									: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...'}
							</Typography>
							<Typography variant='body1'>
								–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:{' '}
								{lead?.statusEndDate
									? new Date(lead.statusEndDate).toLocaleDateString()
									: '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
							</Typography>
						</Grid>
					</Grid>

					<Divider sx={{ my: 2 }} />

					{/* üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
					<Typography variant='h6' sx={{ fontWeight: 'bold' }}>
						–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
					</Typography>
					<Grid container spacing={2} sx={{ mb: 2 }}>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É: {lead?.relocation ? '–î–∞' : '–ù–µ—Ç'}
							</Typography>
							<Typography variant='body1'>
								–ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ: {lead?.remoteWork ? '–î–∞' : '–ù–µ—Ç'}
							</Typography>
						</Grid>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è: {lead?.salaryExpectation || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
							</Typography>
						</Grid>
					</Grid>

					<Divider sx={{ my: 2 }} />

					{/* üîπ –†–µ–∫—Ä—É—Ç–µ—Ä */}
					<Typography variant='h6' sx={{ fontWeight: 'bold' }}>
						–†–µ–∫—Ä—É—Ç–µ—Ä
					</Typography>
					<Typography variant='body1'>
						{lead?.recruiter
							? `${lead.recruiter.firstName} ${lead.recruiter.lastName} (${lead.recruiter.email})`
							: '–ù–µ —É–∫–∞–∑–∞–Ω'}
					</Typography>

					<Divider sx={{ my: 2 }} />

					<Typography variant='h6' sx={{ fontWeight: 'bold' }}>
						–ü—Ä–∏–º–µ—á–∞–Ω–∏—è
					</Typography>
					<Typography variant='body1'>
						{lead?.notes?.trim() ? lead.notes : '–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫'}
					</Typography>

					<Divider sx={{ my: 2 }} />

					{/* üîπ –î–∞—Ç—ã */}
					<Typography variant='h6' sx={{ fontWeight: 'bold' }}>
						–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
					</Typography>
					<Grid container spacing={2} sx={{ mb: 2 }}>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:{' '}
								{new Date(lead?.createdAt).toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
							</Typography>
						</Grid>
						<Grid item xs={12} md={6}>
							<Typography variant='body1'>
								–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:{' '}
								{new Date(lead?.updatedAt).toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
							</Typography>
						</Grid>
					</Grid>

					<Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
						<Button
							variant='contained'
							color='primary'
							onClick={() => setEditModalOpen(true)}
						>
							–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
						</Button>
					</Box>

					{editModalOpen && (
						<EditCandidateModal
							leadId={lead._id}
							onClose={() => setEditModalOpen(false)}
							onLeadUpdated={updatedLead => setLead(updatedLead)}
						/>
					)}
				</Paper>
			</Container>
		</motion.div>
	)
}

export default LeadDetails

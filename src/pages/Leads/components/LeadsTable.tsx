import { fetchCurrentUser } from '@api/authApi'
import { deleteLead, fetchLeadById, fetchLeads } from '@api/leadsApi'
import { TableWrapper } from '@components/index'
import DeleteIcon from '@mui/icons-material/Delete'
import {
	Box,
	Button,
	Dialog,
	DialogActions,
	DialogContent,
	DialogContentText,
	DialogTitle,
	IconButton,
} from '@mui/material'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

const LeadsTable = ({ reload }: { reload: boolean }) => {
	const [leads, setLeads] = useState<any[]>([])
	const [recruiters, setRecruiters] = useState<Record<string, any>>({}) // üî• –ö—ç—à —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	const [open, setOpen] = useState(false)
	const [selectedLead, setSelectedLead] = useState<string | null>(null)
	const [currentUser, setCurrentUser] = useState<any>(null)

	const navigate = useNavigate()

	useEffect(() => {
		const loadData = async () => {
			try {
				const userData = await fetchCurrentUser()
				setCurrentUser(userData)

				let leadsData = await fetchLeads() // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏–¥—ã
				console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –ª–∏–¥—ã:', leadsData)

				// –§–∏–ª—å—Ç—Ä—É–µ–º –ª–∏–¥–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä
				if (userData.role === 'recruiter') {
					leadsData = leadsData.filter(
						lead => lead.recruiter?.toString() === userData._id.toString()
					)
				}

				// üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–∞
				const detailedLeads = await Promise.all(
					leadsData.map(async lead => {
						try {
							return await fetchLeadById(lead._id) // üî• –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–¥–∞
						} catch (err) {
							console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–∞ ${lead._id}:`, err)
							return lead // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
						}
					})
				)

				setLeads(detailedLeads)
				console.log('‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤:', detailedLeads)
			} catch (err) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err)
				setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
			} finally {
				setLoading(false)
			}
		}

		loadData()
	}, [reload])

	const handleOpenDeleteModal = (leadId: string) => {
		setSelectedLead(leadId)
		setOpen(true)
	}

	const handleClose = () => {
		setOpen(false)
		setSelectedLead(null)
	}

	const handleDeleteLead = async () => {
		if (!selectedLead) return
		try {
			await deleteLead(selectedLead)
			setLeads(prev => prev.filter(lead => lead._id !== selectedLead))
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥–∞:', err)
		} finally {
			handleClose()
		}
	}

	const columns = [
		'–ò–º—è',
		'–§–∞–º–∏–ª–∏—è',
		'Email',
		'–¢–µ–ª–µ—Ñ–æ–Ω',
		'Telegram',
		'–í–æ–∑—Ä–∞—Å—Ç',
		'–°—Ç–∞—Ç—É—Å',
		'–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
		'–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É',
		'–ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ',
		'–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è',
		'–†–µ–∫—Ä—É—Ç–µ—Ä',
		'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
		'–î–µ–π—Å—Ç–≤–∏—è',
	]

	if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
	if (error) return <div style={{ color: 'red' }}>{error}</div>

	const data = leads.map(lead => {
		const recruiter =
			typeof lead.recruiter === 'string'
				? recruiters[lead.recruiter] // –ï—Å–ª–∏ recruiter ‚Äî —ç—Ç–æ ID, –±–µ—Ä—ë–º –µ–≥–æ –∏–∑ –∫—ç—à–∞
				: lead.recruiter // –ï—Å–ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

		return [
			lead._id,
			lead.name || '-',
			lead.surname || '-',
			lead.email || '-',
			lead.phone || '-',
			lead.telegram || '-',
			lead.age || '-',
			lead.status?.name || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞',
			lead.statusEndDate
				? new Date(lead.statusEndDate).toLocaleDateString()
				: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
			lead.relocation ? '–î–∞' : '–ù–µ—Ç',
			lead.remoteWork ? '–î–∞' : '–ù–µ—Ç',
			lead.salaryExpectation ? `${lead.salaryExpectation} $` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
			recruiter ? `${recruiter.firstName} ${recruiter.lastName}` : '–ù–µ —É–∫–∞–∑–∞–Ω',
			new Date(lead.createdAt).toLocaleDateString(),
			<Box sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
				<IconButton
					color='error'
					onClick={e => {
						e.stopPropagation()
						handleOpenDeleteModal(lead._id)
					}}
				>
					<DeleteIcon />
				</IconButton>
			</Box>,
		]
	})

	return (
		<>
			<TableWrapper
				columns={columns}
				data={data}
				onRowClick={id => navigate(`/candidates/${id}`)}
			/>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
			<Dialog open={open} onClose={handleClose}>
				<DialogTitle>–£–¥–∞–ª–∏—Ç—å –ª–∏–¥–∞?</DialogTitle>
				<DialogContent>
					<DialogContentText>
						–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ª–∏–¥–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
						–æ—Ç–º–µ–Ω–∏—Ç—å.
					</DialogContentText>
				</DialogContent>
				<DialogActions>
					<Button onClick={handleClose} color='primary'>
						–û—Ç–º–µ–Ω–∞
					</Button>
					<Button onClick={handleDeleteLead} color='error' autoFocus>
						–£–¥–∞–ª–∏—Ç—å
					</Button>
				</DialogActions>
			</Dialog>
		</>
	)
}

export default LeadsTable

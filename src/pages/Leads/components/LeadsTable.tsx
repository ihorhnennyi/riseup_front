import { fetchCurrentUser } from '@api/authApi' // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { deleteLead, fetchLeads } from '@api/leadsApi'
import { TableWrapper } from '@components/index'
import DeleteIcon from '@mui/icons-material/Delete'
import {
	Box,
	Button,
	Dialog,
	DialogActions,
	DialogContent,
	DialogContentText,
	DialogTitle,
	IconButton,
} from '@mui/material'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

const LeadsTable = ({ reload }: { reload: boolean }) => {
	const [leads, setLeads] = useState<any[]>([])
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	const [open, setOpen] = useState(false)
	const [selectedLead, setSelectedLead] = useState<string | null>(null)
	const [currentUser, setCurrentUser] = useState<any>(null) // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

	const navigate = useNavigate()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–∏–¥–æ–≤ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
	useEffect(() => {
		const loadData = async () => {
			try {
				const userData = await fetchCurrentUser()
				setCurrentUser(userData)
				console.log('üîë –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData)

				const leadsData = await fetchLeads()
				console.log('üìå –í—Å–µ –ª–∏–¥—ã:', leadsData)

				// ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
				if (userData.role === 'recruiter') {
					const filteredLeads = leadsData.filter(
						lead => lead.recruiter?._id === userData._id
					)
					setLeads(filteredLeads)
					console.log('üõ† –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–¥—ã –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞:', filteredLeads)
				} else {
					// –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ª–∏–¥–æ–≤
					setLeads(leadsData)
				}
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err)
				setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
			} finally {
				setLoading(false)
			}
		}

		loadData()
	}, [reload])

	const handleOpenDeleteModal = (leadId: string) => {
		setSelectedLead(leadId)
		setOpen(true)
	}

	const handleClose = () => {
		setOpen(false)
		setSelectedLead(null)
	}

	const handleDeleteLead = async () => {
		if (!selectedLead) return
		try {
			await deleteLead(selectedLead)
			const updatedLeads = leads.filter(lead => lead._id !== selectedLead)
			setLeads(updatedLeads) // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–¥–∞:', err)
		} finally {
			handleClose()
		}
	}

	const columns = [
		'–ò–º—è',
		'–§–∞–º–∏–ª–∏—è',
		'Email',
		'–¢–µ–ª–µ—Ñ–æ–Ω',
		'Telegram',
		'–í–æ–∑—Ä–∞—Å—Ç',
		'–°—Ç–∞—Ç—É—Å',
		'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
		'–î–µ–π—Å—Ç–≤–∏—è',
	]

	if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
	if (error) return <div style={{ color: 'red' }}>{error}</div>

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
	const data = leads.map((lead, index) => [
		lead._id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º _id
		lead.name || '-',
		lead.surname || '-',
		lead.email || '-',
		lead.phone || '-',
		lead.telegram || '-',
		lead.age || '-',
		lead.status?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å', // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å
		new Date(lead.createdAt).toLocaleDateString(),
		<Box sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
			<IconButton
				color='error'
				onClick={e => {
					e.stopPropagation() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
					handleOpenDeleteModal(lead._id)
				}}
			>
				<DeleteIcon />
			</IconButton>
		</Box>,
	])

	return (
		<>
			<TableWrapper
				columns={columns}
				data={data}
				onRowClick={id => navigate(`/candidates/${id}`)} // –ü–µ—Ä–µ–¥–∞–µ–º _id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
			/>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
			<Dialog open={open} onClose={handleClose}>
				<DialogTitle>–£–¥–∞–ª–∏—Ç—å –ª–∏–¥–∞?</DialogTitle>
				<DialogContent>
					<DialogContentText>
						–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ª–∏–¥–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
						–æ—Ç–º–µ–Ω–∏—Ç—å.
					</DialogContentText>
				</DialogContent>
				<DialogActions>
					<Button onClick={handleClose} color='primary'>
						–û—Ç–º–µ–Ω–∞
					</Button>
					<Button onClick={handleDeleteLead} color='error' autoFocus>
						–£–¥–∞–ª–∏—Ç—å
					</Button>
				</DialogActions>
			</Dialog>
		</>
	)
}

export default LeadsTable

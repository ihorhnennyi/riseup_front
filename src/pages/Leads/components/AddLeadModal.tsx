import { createLead } from '@api/leadsApi'
import { fetchStatuses } from '@api/statusApi'
import { ModalWrapper } from '@components/index'
import {
	Avatar,
	Box,
	Button,
	Checkbox,
	FormControlLabel,
	MenuItem,
	TextField,
	Typography,
} from '@mui/material'
import { DatePicker } from '@mui/x-date-pickers/DatePicker'
import dayjs from 'dayjs'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

const AddCandidateModal = ({ onLeadAdded }) => {
	const navigate = useNavigate()
	const [open, setOpen] = useState(false)
	const [statuses, setStatuses] = useState([])
	const [loading, setLoading] = useState(false)
	const [error, setError] = useState<string | null>(null)

	const [formData, setFormData] = useState({
		name: '',
		surname: '',
		middleName: '',
		email: '',
		phone: '',
		age: '',
		photo: null as File | null,
		telegram: '',
		salaryExpectation: '',
		relocation: false,
		remoteWork: true,
		workSchedule: [],
		portfolio: [''],
		notes: '',
		statusId: '',
		statusEndDate: '',
	})

	useEffect(() => {
		fetchStatuses().then(setStatuses).catch(console.error)
	}, [])

	const handleChange = (field, value) => {
		setFormData(prev => ({ ...prev, [field]: value }))
	}

	const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0]
		if (file) {
			console.log('üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', file)
			console.log('üìå –ù–∞–∑–≤–∞–Ω–∏–µ:', file.name)
			console.log('üìå –¢–∏–ø:', file.type)
			console.log('üìå –†–∞–∑–º–µ—Ä:', file.size)
			setFormData(prev => ({ ...prev, photo: file }))
		} else {
			console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ')
		}
	}

	useEffect(() => {
		console.log('‚úÖ –§–æ—Ç–æ –≤ formData –æ–±–Ω–æ–≤–∏–ª–æ—Å—å:', formData.photo)
	}, [formData.photo])

	const handleSubmit = async () => {
		setLoading(true)
		setError(null)

		if (!formData.name?.trim()) {
			setError('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
			setLoading(false)
			return
		}

		try {
			// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
			const formDataToSend = new FormData()

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
			formDataToSend.append(
				'leadData',
				JSON.stringify({
					name: formData.name?.trim() || '',
					surname: formData.surname?.trim() || '',
					middleName: formData.middleName?.trim() || '',
					email: formData.email?.trim() || '',
					phone: formData.phone?.trim() || '',
					age: formData.age ? Number(formData.age) : 0,
					telegram: formData.telegram?.trim() || '',
					salaryExpectation: formData.salaryExpectation?.trim() || '',
					relocation: !!formData.relocation,
					remoteWork: !!formData.remoteWork,
					workSchedule: Array.isArray(formData.workSchedule)
						? formData.workSchedule
						: [],
					portfolio: Array.isArray(formData.portfolio)
						? formData.portfolio
						: [],
					notes: formData.notes?.trim() || '',
					statusId: formData.statusId?.trim() || null,
					statusEndDate: formData.statusEndDate
						? new Date(formData.statusEndDate).toISOString()
						: undefined,
				})
			)

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É
			if (formData.photo) {
				formDataToSend.append('photo', formData.photo)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
			await createLead(formDataToSend)

			// –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å FormData –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

			setOpen(false)
			onLeadAdded()
			navigate('/candidates')
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞:', err)
			setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞')
		} finally {
			setLoading(false)
		}
	}

	return (
		<>
			<Button variant='contained' onClick={() => setOpen(true)}>
				–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
			</Button>

			<ModalWrapper
				title='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'
				open={open}
				onClose={() => setOpen(false)}
				actions={
					<>
						<Button onClick={() => setOpen(false)}>–û—Ç–º–µ–Ω–∞</Button>
						<Button
							color='primary'
							onClick={handleSubmit}
							disabled={loading || !formData.name?.trim()}
						>
							{loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
						</Button>
					</>
				}
			>
				<Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
					<Typography variant='h6'>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>

					<Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
						<Avatar
							src={
								formData.photo
									? URL.createObjectURL(formData.photo)
									: '/default-avatar.png'
							}
							sx={{ width: 80, height: 80 }}
						/>

						<Button variant='contained' component='label'>
							–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
							<input type='file' hidden onChange={handlePhotoChange} />
						</Button>
					</Box>

					<TextField
						label='–ò–º—è'
						value={formData.name}
						onChange={e => handleChange('name', e.target.value)}
						error={
							!formData.name?.trim() &&
							error === '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
						}
						helperText={
							!formData.name?.trim() &&
							error === '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
								? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è'
								: ''
						}
					/>

					<TextField
						label='–§–∞–º–∏–ª–∏—è'
						value={formData.surname}
						onChange={e => handleChange('surname', e.target.value)}
					/>
					<TextField
						label='–û—Ç—á–µ—Å—Ç–≤–æ'
						value={formData.middleName}
						onChange={e => handleChange('middleName', e.target.value)}
					/>
					<TextField
						label='Email'
						value={formData.email}
						onChange={e => handleChange('email', e.target.value)}
					/>
					<TextField
						label='–¢–µ–ª–µ—Ñ–æ–Ω'
						value={formData.phone}
						onChange={e => handleChange('phone', e.target.value)}
					/>
					<TextField
						label='Telegram'
						value={formData.telegram}
						onChange={e => handleChange('telegram', e.target.value)}
					/>
					<TextField
						label='–í–æ–∑—Ä–∞—Å—Ç'
						type='number'
						value={formData.age}
						onChange={e => handleChange('age', e.target.value)}
					/>

					<TextField
						select
						label='–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'
						value={formData.statusId}
						onChange={e => handleChange('statusId', e.target.value)}
					>
						{statuses.map(status => (
							<MenuItem key={status._id} value={status._id}>
								{status.name}
							</MenuItem>
						))}
					</TextField>

					{formData.statusId && (
						<DatePicker
							label='–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
							value={
								formData.statusEndDate ? dayjs(formData.statusEndDate) : null
							}
							onChange={date =>
								handleChange('statusEndDate', date?.toISOString() || '')
							}
						/>
					)}

					<Typography variant='h6'>–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞</Typography>
					<TextField
						label='–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞'
						value={formData.salaryExpectation}
						onChange={e => handleChange('salaryExpectation', e.target.value)}
					/>

					<Typography variant='h6'>–†–∞–±–æ—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</Typography>
					<FormControlLabel
						control={
							<Checkbox
								checked={formData.relocation}
								onChange={e => handleChange('relocation', e.target.checked)}
							/>
						}
						label='–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É'
					/>
					<FormControlLabel
						control={
							<Checkbox
								checked={formData.remoteWork}
								onChange={e => handleChange('remoteWork', e.target.checked)}
							/>
						}
						label='–ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ'
					/>

					<Typography variant='h6'>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</Typography>
					<TextField
						label='–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
						multiline
						rows={3}
						value={formData.notes}
						onChange={e => handleChange('notes', e.target.value)}
					/>
				</Box>
			</ModalWrapper>
		</>
	)
}

export default AddCandidateModal
function loadLeads() {
	throw new Error('Function not implemented.')
}
